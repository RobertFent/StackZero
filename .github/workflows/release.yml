name: Publish Docker image to GHCR

on:
  push:
    branches:
      - master
      - develop

jobs:
  generate-tag:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.new_tag.outputs.new_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tags with retry
        id: fetch_tags
        run: |
          latest_tag=""
          retry_count=0
          max_retries=5

          while [ $retry_count -lt $max_retries ]; do
            echo "Attempt $((retry_count + 1)) to fetch tags..."
            git fetch --tags --force

            if [[ "${{ github.ref_name }}" == "develop" ]]; then
              latest_tag=$(git tag -l --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+-staging$' | head -n 1 || true)
            else
              latest_tag=$(git tag -l --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1 || true)
            fi

            if [ -n "$latest_tag" ]; then
              break
            else
              retry_count=$((retry_count + 1))
              sleep 2
            fi
          done

          if [ -z "$latest_tag" ]; then
            echo "latest_tag=v1.0.0" >> $GITHUB_OUTPUT
          else
            echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
          fi

      - name: Generate new tag
        id: new_tag
        run: |
          sanitized_tag=$(echo "${{ steps.fetch_tags.outputs.latest_tag }}" | sed 's/-staging//')

          if [[ "$sanitized_tag" =~ ^v1\.([0-9]+)\.([0-9]+)$ ]]; then
            minor=${BASH_REMATCH[1]}
            patch=${BASH_REMATCH[2]}
            if echo "${{ github.event.head_commit.message }}" | grep -qi "hotfix"; then
              patch=$((patch + 1))
            else
              minor=$((minor + 1))
              patch=0
            fi
          else
            minor=0
            patch=0
          fi

          new_tag="v1.${minor}.${patch}"
          if [[ "${GITHUB_REF_NAME}" == "develop" ]]; then
            new_tag="${new_tag}-staging"
          fi

          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Push Git tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ steps.new_tag.outputs.new_tag }}
          git push origin ${{ steps.new_tag.outputs.new_tag }}

  publish:
    runs-on: ubuntu-latest
    needs: generate-tag
    env:
      DOCKER_TAG: ${{ needs.generate-tag.outputs.new_tag }}

    permissions:
      contents: read
      packages: write  # required for pushing to GHCR

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract repo name
        id: meta
        run: |
          IMAGE_NAME=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          echo "image=$IMAGE_NAME" >> $GITHUB_OUTPUT

          # Assuming DOCKER_TAG is already available via env or passed as input
          echo "tag=${DOCKER_TAG}" >> $GITHUB_OUTPUT

          if [[ "${DOCKER_TAG}" != *-staging ]]; then
            echo "is_production=true" >> $GITHUB_OUTPUT
          else
            echo "is_production=false" >> $GITHUB_OUTPUT
          fi
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Build and push Docker image (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          # push to :production and :staging and to :latest if production is built
          tags: |
            ghcr.io/${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.tag }}
            ${{ steps.meta.outputs.is_production == 'true' && format('ghcr.io/{0}:latest', steps.meta.outputs.image) || '' }}
